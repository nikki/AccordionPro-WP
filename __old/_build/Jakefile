// sublime: x_syntax Packages/JavaScript/JavaScript.tmLanguage
var fs = require('fs'),
    ncp = require('ncp').ncp,
    async = require('async'),
    path = '/Volumes/Nikki/webserver/projects/Accordion-Pro/';

desc('Copy source css to build folder');
task('cssSource', function() {
  var cssSource = path + 'accordionpro_js/css/accordionpro.css',
      cssDest = path + 'build/accordionpro_js/css/accordionpro.css';

  // copy unminified source file over to dest
  ncp(cssSource, cssDest, function (err) {
   if (err) return console.error(err);
   complete();
  });
});

desc('Compress and concatentate css, write to build folder');
task('cssMin', function() {
  var cssp = require('uglifycss').processString,
      cssSource = path + 'accordionpro_js/css/accordionpro.css',
      output = '', css;

  // read css file
  css = fs.readFileSync(cssSource).toString();

  // split comment block
  css = css.split('/* build */');
  css[0] += '\n';

  // squidge
  css[1] = cssp(css[1]);

  // concat
  output += css.join('');

  // output
  fs.writeFileSync(path + 'accordionpro_js/css/accordionpro.min.css', output);
  fs.writeFileSync(path + 'build/accordionpro_js/css/accordionpro.min.css', output);
});

desc('Compress and concatentate js, write to build folder');
task('js', function() {
  var jsp = require('uglify-js').parser,
      pro = require('uglify-js').uglify,
      jsSource = [
        path + 'accordionpro_js/js/jquery.swipe.min.js',
        path + 'accordionpro_js/js/modernizr.custom.min.js',
        path + 'accordionpro_js/js/animate.min.js',
        path + 'accordionpro_js/js/jquery.imagesloaded.min.js',
        path + 'accordionpro_js/js/jquery.accordionpro.js'
      ],
      concat = output = '';

  // concat
  jsSource.map(function(file, index) {
    var js = fs.readFileSync(file), ast;

    // keep unminified version (not particularly elegant, but *shrug*)
    concat += js + '\n\n';

    if (!file.match('min')) {
      // read file
      js = js.toString();

      // split comment block
      js = js.split('/* build */');
      js[0] += '\n';

      // squidge code
      ast = jsp.parse(js[1]);
      ast = pro.ast_mangle(ast);
      ast = pro.ast_squeeze(ast);
      js[1] = pro.gen_code(ast) + ';';

      // not last file?
      if (index < jsSource.length - 1) js[1] += '\n\n';

      // concat
      output += js.join('');
    } else {
      // concat
      output += js + '\n\n';
    }
  });

  // output
  fs.writeFileSync(path + 'accordionpro_js/js/jquery.accordionpro.min.js', output);
  fs.writeFileSync(path + 'build/accordionpro_js/js/jquery.accordionpro.js', concat);
  fs.writeFileSync(path + 'build/accordionpro_js/js/jquery.accordionpro.min.js', output);
});

desc('Copy CSS to WP Dev');
task('copyCSStoWP', function() {
  var cssSource = path + 'build/accordionpro_js/css',
      cssDest = path + 'accordionpro_wp/css';

  // copy css...
  ncp.limit = 16;
  ncp(cssSource, cssDest, function (err) {
    if (err) return console.error(err);
    complete();
  });
});

desc('Copy JS to WP Dev');
task('copyJStoWP', function() {
  var jsSource = path + 'build/accordionpro_js/js',
      jsDest = path + 'accordionpro_wp/js';

  // copy js...
  ncp.limit = 16;
  ncp(jsSource, jsDest, function (err) {
    if (err) return console.error(err);
    complete();
  });
});

desc('Drop copy of WP plugin into build folder');
task('buildWP', function() {
  var ncp = require('ncp').ncp,
      source = path + '/accordionpro_wp',
      destination = path + '/build/accordionpro_wp';

  ncp.limit = 16;
  ncp(source, destination, function (err) {
   if (err) return console.error(err);
   complete();
  });
});

desc('Drop copy of WP plugin into WP test install plugin folder');
task('testWP', function() {
  var ncp = require('ncp').ncp,
      source = path + 'accordionpro_wp',
      destination = '/Volumes/Nikki/webserver/websites/wordpress/wp-content/plugins/accordionpro_wp';

  ncp.limit = 16;
  ncp(source, destination, function (err) {
   if (err) return console.error(err);
   complete(); // required for async tasks
  });
});

desc('Run all tasks');
task('default', function() {
  // execute -> run task without pre-reqs, invoke -> run task & pre-reqs
  async.waterfall([
    function(cb) {
      // console.log('CSS compiled');
      jake.Task['cssSource'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('CSS minified');
      jake.Task['cssMin'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('JS compiled');
      jake.Task['js'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('CSS copied to WP build');
      jake.Task['copyCSStoWP'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('JS copied to WP build');
      jake.Task['copyJStoWP'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('WP build compiled');
      jake.Task['buildWP'].execute();
      cb(null);
    },
    function(cb) {
      // console.log('WP build copied to test folder');
      jake.Task['testWP'].execute();
      cb(null);
    }
  ], function(err, res) {
    if (err) throw err;
    console.log('build completed');
  });
});